import { Sheet, SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet'
import { Button } from '@/components/ui/button'
import { useEffect, useMemo, useState } from 'react'
import { usePage } from '@inertiajs/react'
import { MessageSquare, Send } from 'lucide-react'
import { router } from '@inertiajs/react'

// Actions generated by LACT (similar to AiChatController usage)
import { conversations as fetchConversations, messages as fetchMessages, startJson as startChatJson, sendJson as sendChatJson } from '@actions/ChatController'

type ConversationListItem = {
    id: number
    title: string
    lastMessage?: string
    updatedAt?: string
}

type MessageItem = {
    id: number
    body: string
    user: { id: number; name?: string }
    createdAt?: string
    isMine: boolean
}

type TeamUser = { id: number; name: string; email: string }

type Shared = import('@/types').SharedData

export default function ChatOffcanvas() {
    const { props } = usePage<Shared & { targetUserId?: number | null }>()

    const [open, setOpen] = useState(false)
    const [loading, setLoading] = useState(false)
    const [conversations, setConversations] = useState<ConversationListItem[]>([])
    const [teamUsers, setTeamUsers] = useState<TeamUser[]>([])
    const [messages, setMessages] = useState<MessageItem[]>([])
    const [conversationId, setConversationId] = useState<number | null>(null)
    const [body, setBody] = useState('')

    // Open handler via global event to keep trigger simple
    useEffect(() => {
        const handler = () => setOpen(true)
        window.addEventListener('open-chat', handler)
        return () => window.removeEventListener('open-chat', handler)
    }, [])

    useEffect(() => {
        if (!open) return
        // initial load
        void loadConversations()
    }, [open])

    const currentConversationId = useMemo(() => conversationId ?? conversations[0]?.id ?? null, [conversationId, conversations])

    async function loadConversations() {
        setLoading(true)
        try {
            const res = await fetchConversations.data({})
            setConversations(res.conversations || [])
            setTeamUsers(res.teamUsers || [])
            // If targetUserId is passed (from elsewhere), start chat directly
            if (props.targetUserId) {
                await startWithUser(props.targetUserId)
            }
        } finally {
            setLoading(false)
        }
    }

    async function loadMessages(id: number) {
        setLoading(true)
        try {
            const res = await fetchMessages.data({ conversation_id: id })
            setMessages(res.messages || [])
            setConversationId(id)
        } finally {
            setLoading(false)
        }
    }

    async function startWithUser(userId: number) {
        try {
            const { conversation_id } = await startChatJson.data({ user_id: userId })
            await loadConversations()
            await loadMessages(conversation_id)
        } catch {
            // fallback to POST route in case actions are not ready
            await router.post(
                route('chat.start'),
                { user_id: userId },
                { preserveScroll: true },
            )
        }
    }

    async function sendMessage(e: React.FormEvent) {
        e.preventDefault()
        if (!currentConversationId || !body.trim()) return
        try {
            await sendChatJson.data({ conversation_id: currentConversationId, body })
            setBody('')
            await loadMessages(currentConversationId)
        } catch {
            // fallback to POST route
            await router.post(
                route('chat.send'),
                { conversation_id: currentConversationId, body },
                {
                    preserveScroll: true,
                    onSuccess: () => setBody(''),
                },
            )
        }
    }

    return (
        <Sheet open={open} onOpenChange={setOpen}>
            <SheetContent
                side="left"
                className="overflow-hidden bg-white pl-4 pr-0 dark:bg-neutral-900 w-full max-w-[min(860px,100vw)] md:max-w-[60vw]"
            >
                <SheetHeader className="mb-4 pr-4">
                    <SheetTitle className="flex items-center gap-2 text-neutral-900 dark:text-white">
                        <MessageSquare className="h-5 w-5 text-primary" /> Chat
                    </SheetTitle>
                </SheetHeader>

                <div className="flex h-[calc(100vh-6rem)] pr-4">
                    {/* Users/Conversations list */}
                    <aside className="w-72 shrink-0 border-r border-neutral-200 pr-3 dark:border-neutral-800 overflow-y-auto">
                        <h2 className="mb-2 text-sm font-semibold">Conversations</h2>
                        <div className="mb-6 space-y-1">
                            {conversations.length === 0 && <div className="text-sm text-neutral-500">No conversations yet</div>}
                            {conversations.map((c) => (
                                <button
                                    key={c.id}
                                    onClick={() => loadMessages(c.id)}
                                    className={`block w-full rounded px-3 py-2 text-left text-sm hover:bg-neutral-100 dark:hover:bg-neutral-800 ${currentConversationId === c.id ? 'bg-neutral-100 dark:bg-neutral-800' : ''}`}
                                >
                                    <div className="font-medium">{c.title}</div>
                                    {c.lastMessage && <div className="line-clamp-1 text-xs text-neutral-500">{c.lastMessage}</div>}
                                </button>
                            ))}
                        </div>

                        <h2 className="mb-2 text-sm font-semibold">Team members & leaders</h2>
                        <div className="space-y-1">
                            {teamUsers.length === 0 && <div className="text-sm text-neutral-500">No team connections</div>}
                            {teamUsers.map((u) => (
                                <div
                                    key={u.id}
                                    className="flex items-center justify-between gap-2 rounded px-3 py-2 hover:bg-neutral-100 dark:hover:bg-neutral-800"
                                >
                                    <div className="text-sm">
                                        <div className="font-medium">{u.name}</div>
                                        <div className="text-xs text-neutral-500">{u.email}</div>
                                    </div>
                                    <Button size="sm" variant="outline" onClick={() => startWithUser(u.id)}>
                                        Message
                                    </Button>
                                </div>
                            ))}
                        </div>
                    </aside>

                    {/* Messages pane */}
                    <section className="flex min-w-0 flex-1 flex-col">
                        <div className="flex-1 overflow-y-auto p-4">
                            {loading && <div className="text-center text-sm text-neutral-500">Loading...</div>}
                            {!loading && messages.length === 0 ? (
                                <div className="text-center text-neutral-500">Select a conversation or start messaging a team member</div>
                            ) : (
                                <div className="space-y-3">
                                    {messages.map((m) => (
                                        <div key={m.id} className={`flex ${m.isMine ? 'justify-end' : 'justify-start'}`}>
                                            <div
                                                className={`max-w-[70%] rounded px-3 py-2 text-sm ${m.isMine ? 'bg-blue-600 text-white' : 'bg-neutral-100 dark:bg-neutral-800'}`}
                                            >
                                                {!m.isMine && <div className="mb-1 text-xs text-neutral-500">{m.user.name}</div>}
                                                <div>{m.body}</div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>
                        <form onSubmit={sendMessage} className="flex gap-2 border-t border-neutral-200 p-3 dark:border-neutral-800">
                            <input type="hidden" value={currentConversationId ?? ''} onChange={() => {}} />
                            <input
                                className="flex-1 rounded border border-neutral-300 bg-white px-3 py-2 text-sm outline-none dark:border-neutral-700 dark:bg-neutral-900"
                                placeholder="Type your message..."
                                value={body}
                                onChange={(e) => setBody(e.target.value)}
                            />
                            <Button type="submit" disabled={!currentConversationId || !body.trim()}>
                                <Send className="mr-2 h-4 w-4" /> Send
                            </Button>
                        </form>
                    </section>
                </div>
            </SheetContent>
        </Sheet>
    )
}
